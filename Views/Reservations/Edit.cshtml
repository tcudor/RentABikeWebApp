@model RentABikeWebApp.Data.ViewModels.ReservationFormVM

@{
    ViewData["Title"] = "Edit Reservation";
    var isClient = !User.IsInRole("Admin") && User.Identity!.IsAuthenticated;
    DateTime min = DateTime.MinValue;
    string startVal = Model.Reservation.StartDate > min
        ? Model.Reservation.StartDate.ToString("yyyy-MM-ddTHH:mm")
        : "";
    string endVal = Model.Reservation.EndDate > min
        ? Model.Reservation.EndDate.ToString("yyyy-MM-ddTHH:mm")
        : "";
}

<div class="container py-4">
    <h1>@ViewData["Title"]</h1>
    <hr />

    <form asp-action="Edit" method="post">
        <input type="hidden" asp-for="Reservation.Id" />

        @if (!ViewData.ModelState.IsValid)
        {
            <div asp-validation-summary="All" class="alert alert-danger mb-3"></div>
        }

        <div class="form-group mb-3">
            <label asp-for="Reservation.StartDate"></label>
            <input asp-for="Reservation.StartDate"
                   type="datetime-local"
                   class="form-control"
                   id="StartDate"
                   value="@startVal" />
            <span asp-validation-for="Reservation.StartDate" class="text-danger"></span>
        </div>

        <div class="form-group mb-3">
            <label asp-for="Reservation.EndDate"></label>
            <input asp-for="Reservation.EndDate"
                   type="datetime-local"
                   class="form-control"
                   id="EndDate"
                   value="@endVal" />
            <span asp-validation-for="Reservation.EndDate" class="text-danger"></span>
        </div>

        <div class="form-group mb-3">
            <label asp-for="Reservation.BikeId"></label>
            <select asp-for="Reservation.BikeId"
                    class="form-control"
                    asp-items="Model.Bikes"
                    id="BikeId"></select>
        </div>

        <div class="form-row row mb-4">
            <div class="col">
                <label>Price Per Hour</label>
                <input readonly
                       class="form-control"
                       id="PricePerHour"
                       value="@Model.PricePerHour" />
            </div>
            <div class="col">
                <label asp-for="Reservation.TotalCost"></label>
                <input id="TotalCost"
                       asp-for="Reservation.TotalCost"
                       class="form-control"
                       readonly />
                <span asp-validation-for="Reservation.TotalCost" class="text-danger"></span>
            </div>
        </div>

        <div class="form-group mb-4">
            <label asp-for="Reservation.CustomerId"></label>
            @if (isClient)
            {
                <input type="hidden" asp-for="Reservation.CustomerId" />
                
                    var firstCust = Model.Customers.FirstOrDefault();
                
                <div class="form-control-plaintext">@firstCust?.Text</div>
            }
            else
            {
                <select asp-for="Reservation.CustomerId"
                        class="form-control"
                        asp-items="Model.Customers"></select>
            }
        </div>

        <button type="submit" class="btn btn-primary">Save</button>
        <a asp-action="Index" class="btn btn-secondary ms-2">Back</a>
    </form>

    <hr />

    <h4>Active Reservations</h4>
    <ul id="reservationList">
        @if (!Model.ActiveReservations.Any())
        {
            <li class="text-muted">No future reservations.</li>
        }
        else
        {
            foreach (var r in Model.ActiveReservations)
            {
                <li>@r.StartDate – @r.EndDate</li>
            }
        }
    </ul>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }

    <script>
        document.addEventListener("DOMContentLoaded", () => {
            const bikeSel = document.getElementById("BikeId");
            var startDateInput = document.getElementById("StartDate");
            var endDateInput = document.getElementById("EndDate");
            var totalCostInput = document.getElementById("TotalCost");
            var pricePerHourInput = document.getElementById("PricePerHour");
            const listEl = document.getElementById("reservationList");



        function updateTotalCost() {
                var pricePerHour = pricePerHourInput.value;
                var startDate = new Date(startDateInput.value);
                var endDate = new Date(endDateInput.value);
                var differenceMilliseconds = endDate - startDate;
                var durationHours = differenceMilliseconds / (1000 * 60 * 60);

                if (!isNaN(pricePerHour) && !isNaN(durationHours)) {
                    console.log(pricePerHour);
                    console.log(durationHours);
                    var totalCost = pricePerHour * durationHours;
                    totalCostInput.value = totalCost.toFixed(2);
                }
            }

          function refreshBike() {
            fetch(`/Reservations/GetData?BikeId=${bikeSel.value}`)
              .then(r => r.json())
              .then(data => {
                pricePerHourInput.value = data.pricePerHour;
                listEl.innerHTML = "";
                data.activeReservations.forEach(x => {
                  const li = document.createElement("li");
                  li.textContent = `${x.startDate} – ${x.endDate}`;
                  listEl.appendChild(li);
                });
                updateTotalCost();
              })
              .catch(console.error);
          }

          bikeSel.addEventListener("change", refreshBike);
          startDateInput.addEventListener("change", updateTotalCost);
          endDateInput.addEventListener("change", updateTotalCost);

          refreshBike();
        });

    </script>
}
